"""Created on Thu May 11 12:52:09 2023@author: tomasferreyrahauchar""" import numpy as npimport matplotlib.pyplot as pltfrom matplotlib.colors import LightSourcefrom skimage.morphology import binary_closing, disk, remove_small_holes, remove_small_objectsfrom scipy.optimize import curve_fit#%%# import Projects.Melting_dynamics.Functions as fun#if I import this it will start running the code, then I should separate exmples from the functions themselves#%%def mrot(th):    """    Return a 2x2 rotation matrix given the angle th.        th: float (in radians)    """    mat = np.array([[np.cos(th), -np.sin(th)],                    [np.sin(th),  np.cos(th)]])    return matdef rot(y,z,mat):    """    Returns the rotated 2d arrays y and z using the rotation matrix from mrot().        y: 2d-array    z: 2d-array    mat: 2x2 matrix from mrot()    """    n1,n2 = np.shape(y)    yzf = np.zeros((n1*n2,2))    yzf[:,0], yzf[:,1] = y.flatten(), z.flatten()    yzr = np.dot(yzf,mat.T)    yr,zr = yzr[:,0].reshape(n1,n2), yzr[:,1].reshape(n1,n2)    return yr,zrdef lin(x,m,o):    """    Linear function.        x: array_like    m: float, slope    o: float, origin    """    return m*x+o#%%hices = np.load('./Height profiles/ice_block_45-0.npy')#%%d = 0.23990257662890377ny,nx = np.shape(hices[0])xr,yr = (np.arange(0.5,nx+0.5) - nx/2) * d, (-np.arange(0.5,ny+0.5) + ny/2) * dxr,yr = np.meshgrid(xr,yr)z_ym = np.nanmean(hices[0], axis=1)[300:580]z_xm = np.nanmean(hices[0], axis=0)[350:700]# plt.figure()# # plt.plot(yr[300:580,0],z_ym)# plt.plot(xr[0,350:700],xm)# plt.show()pary,cov = curve_fit(lin, yr[300:580,0], z_ym)my = mrot( -np.arctan(pary[0]) )parx,cov = curve_fit(lin, xr[0,350:700], z_xm)# mx = mrot( -np.arctan(parx[0]) )zro = np.zeros_like(hices)yro = np.zeros_like(hices)for i in range(len(hices)):    zr1 = hices[i] - lin(xr,*parx)    yro[i],zro[i] = rot(yr,zr1,my)#%%d,L,D,w = 0.23990257662890377 , 5499.86657262652 , 814.6376201885718 , 2.5500455007016094n = 0hice = hices[n]ny,nx = np.shape(hice)xr,yr = (np.arange(0.5,nx+0.5) - nx/2) * d, (-np.arange(0.5,ny+0.5) + ny/2) * dxr,yr = np.meshgrid(xr,yr)az,al = 90 , 90ver,fra = 0.01 , 5.blue = np.array([1., 1., 1.])rgb = np.tile(blue, (hice.shape[0], hice.shape[1], 1))fig = plt.figure()ax = plt.axes(projection='3d')ls = LightSource()illuminated_surface = ls.shade_rgb(rgb, hice)# ax.plot_surface(xr, hice, yr, ccount=300, rcount=300,#                 antialiased=True,#                 facecolors=illuminated_surface)# for n in [0,20]:ax.plot_surface(xr, zro[n], yro[n], ccount=300, rcount=300,                antialiased=True )# , facecolors=illuminated_surface)ax.set_box_aspect([3,2,3])ax.set_xlabel('x (mm)')ax.set_ylabel('z (mm)')ax.set_zlabel('y (mm)')# ax.invert_zaxis()ax.invert_xaxis()# ax.set_zlim(-60,100)# ax.set_xlim(70,-70)ax.set_ylim(-70,10)# ax.set_title('Azimutal = '+str(az)+'°, Altitud = '+str(al)+'°')ax.view_init(17,120)# plt.savefig('imageni2.png',bbox_inches='tight',dpi=1000)plt.show()#%%n = 0plt.figure()plt.imshow(zro[n])plt.show()line = 600der = np.gradient( zro[n], axis=0 )plt.figure()# plt.plot(xr[600,:], zro[n][600,:])# plt.plot(yro[n][:,600], zro[n][:,600])plt.plot(zro[n][:,600])plt.plot(der[:,600])plt.show()plt.figure()plt.imshow(der)plt.show()#%%from scipy.signal import bessel, savgol_filterfrom scipy.special import jvzfc = np.zeros_like(zro)for n in range(40):    zsg = savgol_filter(zro[n], 15,1, deriv=1,axis=0 )    filt = zsg < 0.2    filt = remove_small_objects(filt, 200)    filt = remove_small_holes(filt, 1000)    filt = filt.astype('float64')    filt[ filt < 0.5 ] = np.nan    zfc[n] = zro[n] * filt#%%mel = zfc[1:] - zfc[:-1]n = 30plt.figure()# plt.imshow(mel[n], vmax=0, vmin = -3.4)plt.imshow(zro[n])plt.colorbar()# plt.plot(zro[n,450,:])plt.show()#%%l1 = 500plt.figure()plt.plot(zro[:,l1,514] ,'b.-')plt.plot(zro[:,l1,470] ,'r.-')# plt.plot(zro[:,::50,500] - zro[0,::50,500] ,'.-')plt.grid()plt.show()